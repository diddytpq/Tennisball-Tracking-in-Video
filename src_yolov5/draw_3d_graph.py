from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse, Circle, PathPatch
from matplotlib.transforms import Affine2D
import numpy as np
from matplotlib.cbook import get_sample_data
import mpl_toolkits.mplot3d.art3d as art3d

import cv2

from pathlib import Path
import sys

import pickle

FILE = Path(__file__).absolute()
sys.path.append(FILE.parents[0].as_posix())  # add code to path

path = str(FILE.parents[0])


def draw_point_3D(real_ball_trajectory_list, estimation_ball_trajectory_list, label = False):
        
        real_x = []
        real_y = []
        real_z = []
        esti_x = []
        esti_y = []
        esti_z = []



        for i in range((len(real_ball_trajectory_list))):

            real_x.append(real_ball_trajectory_list[i][0])
            real_y.append(real_ball_trajectory_list[i][1])
            real_z.append(real_ball_trajectory_list[i][2])

            ax.plot(real_x, real_y, real_z, c= 'red', zorder = 100)

        ax.scatter(real_x[0], real_y[0], real_z[0],s = 180, c='#FF3333', zorder = 101, marker = '*')
        


        for j in range((len(estimation_ball_trajectory_list))):

            esti_x.append(estimation_ball_trajectory_list[j][0])
            esti_y.append(estimation_ball_trajectory_list[j][1])
            esti_z.append(estimation_ball_trajectory_list[j][2])

            ax.plot(esti_x, esti_y, esti_z, '#3336FF', zorder = 100)

        ax.scatter(esti_x[0], esti_y[0], esti_z[0],s = 180, c='#3336FF', zorder = 101, marker = '*')


        if label == True:
            ax.plot(real_x[-1], real_y[-1], real_z[-1], 'red', zorder = 100, label = 'Actual trajectory')
            ax.plot(esti_x[-1], esti_y[-1], esti_z[-1], '#3336FF', zorder = 100, label = 'Predict trajectory')



#궤적
#real_ball_trajectory_list_5 = [[0,0,0]]
#estimation_ball_trajectory_list_5 =  [[-8.075992233062022, -2.0712591029119727, 2.0143476038492176], [-7.041614424760605, -1.9654479963268496, 1.998508488845969], [-6.065044696824322, -1.879832764271466, 1.9635872373067076], [-5.107183755941063, -1.7968180783990304, 1.925614986159784], [-4.169832727705863, -1.6838107370497974, 1.884759164010521], [-3.2611958072772738, -1.5644043096331428, 1.81101188769961], [-2.368649316849956, -1.4805807124989778, 1.737028408823873], [-1.4834200661316506, -1.378965700223568, 1.6496367839315553], [-0.7006541039923906, -1.2862463955187806, 1.5580097756344515]]

real_pos_list = [[-11.5, -8.4e-05, 1.29998], [-9.906371352281468, -0.1433388437548033, 1.4506891964912279], [-8.386689722106798, -0.28070598575522065, 1.5718252631578946], [-6.7339579848249365, -0.43073052027466796, 1.6768775087719294], [-5.350389302018689, -0.5566830043803485, 1.7422829333333323], [-4.1843643546672675, -0.6629845868254337, 1.7802260877192975], [-2.636821113232064, -0.8040212514452872, 1.8051646035087712], [-1.1075108270151939, -0.9441595289913224, 1.7996509999999997], [0.09689369974035862, -1.0600917564932248, 1.7701613228070174], [1.4917090644393414, -1.202767180204984, 1.6984578807017552], [2.5760385611825303, -1.3205119402071581, 1.605668673684211], [3.557581850630719, -1.4336058928221527, 1.4831271052631583], [4.282849431405132, -1.5190554204178421, 1.367774929824562], [5.107017136830614, -1.6161571563220347, 1.2136629122807037], [5.815801363496529, -1.6996646491996403, 1.0615314771929854], [6.508102236053935, -1.781230107359162, 0.8954449824561446], [7.18391975450283, -1.8608535308006, 0.7166382280701807], [7.942154043494274, -1.9501871278324572, 0.4964159719298306], [8.601488207834628, -2.0278685165558143, 0.28806235789474316], [9.376170088706635, -2.1191212924293525, 0.023389572543037935], [10.169468863583372, -2.2047021894469347, 0.17637912850963944], [10.828635548873617, -2.274339807435977, 0.3671952908753961], [11.516461655263438, -2.347005147946282, 0.5441990081266206], [12.161298630003895, -2.415128904674693, 0.6896334930496439], [12.763146473094988, -2.47871107762121, 0.8074677456444661], [13.393653737285657, -2.5453209730889896, 0.9123715531247563], [13.92385302762781, -2.6013338397323498, 0.9859008185059097], [14.525700870718904, -2.6649160126788667, 1.0531082711007325], [15.098889292710421, -2.725470463104121, 1.1010433688100876], [15.672077714701938, -2.786024913529375, 1.1332984665194428]]




plt.rcParams["figure.autolayout"] = True
fig_3d = plt.figure(figsize=(8,8),dpi=100)
ax = fig_3d.add_subplot(projection='3d')

ax.set_xlim(-12, 12)
ax.set_ylim(-6, 6)
ax.set_zlim(0,5)
ax.set_box_aspect((2, 1, 0.5))

img = cv2.imread(path + "/images/tennis_court_2.png")
img = cv2.resize(img, dsize=(1000,400), interpolation=cv2.INTER_LINEAR)

# cv2.imshow("img",img)
# cv2.waitKey(0)

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)
img=cv2.normalize(img, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)
img[:,:,3] = float(1)

stepX, stepY = 24 / img.shape[1], 12 / img.shape[0]

X1 = np.arange(-12, 12, stepX)
Y1 = np.arange(-6, 6, stepY)
#Y1 = np.arange(-8.4, 8.4, stepY)


X1, Y1 = np.meshgrid(X1, Y1)

estimation_ball_trajectory = [[2.814643354421306, -1.435286586817641, 1.7047666136691109],
 [3.102279042800609, -1.448438040783253, 1.6755077679605062],
 [3.388398965727963, -1.4615926635206422, 1.6452846105502719],
 [3.6730190566028558, -1.4747504565569898, 1.6140981922930884],
 [3.956154998470076, -1.4879114214205809, 1.5819495969153414],
 [4.237822229244121, -1.5010755596408059, 1.5488399408651314],
 [4.518035946797891, -1.5142428727481612, 1.5147703731579554],
 [4.79681111391989, -1.527413362274251, 1.479742075218108],
 [5.07416246314398, -1.5405870297517879, 1.4437562607158454],
 [5.350104501455617, -1.553763876714594, 1.406814175400361],
 [5.624651514878331, -1.566943904697602, 1.368917096928622],
 [5.897817572944105, -1.5801271152368563, 1.3300663346901136],
 [6.16961653305115, -1.5933135098695144, 1.2902632296275447],
 [6.440062044712477, -1.6065030901338468, 1.2495091540535634],
 [6.709167553698529, -1.6196958575692397, 1.2078055114635387],
 [6.976946306077039, -1.632891813716195, 1.1651537363444575],
 [7.2434113521531485, -1.6460909601163316, 1.121555293979997],
 [7.508575550312735, -1.6592932983123867, 1.077011680251821],
 [7.772451570771799, -1.6724988298482166, 1.031524421437163],
 [8.035051899234634, -1.685707556268798, 0.9850950740027502],
 [8.296388840463463, -1.6989194791202291, 0.9377252243951261],
 [8.556474521762055, -1.7121345999497304, 0.8894164888274319],
 [8.815320896375862, -1.725352920305646, 0.8401705130627062],
 [9.072939746811002, -1.7385744417374445, 0.7899889721937633],
 [9.329342688074455, -1.7517991657957208, 0.7388735704197106],
 [9.584541170837673, -1.7650270940321962, 0.6868260408191683],
 [9.838546484525795, -1.7782582279997199, 0.6338481451202538],
 [10.091369760334533, -1.7914925692522703, 0.5799416734673923],
 [10.34302197417677, -1.8047301193449556, 0.5251084441850209],
 [10.593513949560817, -1.817970879834016, 0.4693503035382468],
 [10.842856360402237, -1.831214852276823, 0.41266912549052753],
 [11.091059733771054, -1.8444620382318824, 0.35506681145843744],
 [11.338134452576139, -1.8577124392588338, 0.29654529006358715],
 [11.584090758188461, -1.8709660569184527, 0.23710651688176196],
 [11.828938753004913, -1.8842228927726516, 0.1767524741893465],
 [12.072688402954263, -1.8974829483844804, 0.11548517070710333],
 [12.315349539946865, -1.910746225318128, 0.053306641341372765],
 [12.556931864269563, -1.9240127251389236, -0.009781053077237534],
 [12.797444946927307, -1.9372824494133374, 0.05330769096894344],
 [13.036898231932883, -1.9505553997089815, 0.11548935886229372],
 [13.275301038546122, -1.963831577594612, 0.17676186883619005],
 [13.512662563463934, -1.977110984640129, 0.23712316459811486],
 [13.748991882962454, -1.990393622416578, 0.2965712155940436],
 [13.98429795499254, -2.003679492496152, 0.3551040172704744],
 [14.218589621229862, -2.0169685964521906, 0.41271959133403213],
 [14.45187560908074, -2.0302609358591837, 0.46941598600857753],
 [14.684164533644879, -2.0435565122927706, 0.5251912762897551],
 [14.915464899636097, -2.0568553273297416, 0.5800435641969109],
 [15.145785103262154, -2.07015738254804, 0.6339709790223134]]

real_ball_trajectory= [[-11.5, -8.4e-05, 1.29998], [-9.906371352281468, -0.1433388437548033, 1.4506891964912279], [-8.386689722106798, -0.28070598575522065, 1.5718252631578946], [-6.7339579848249365, -0.43073052027466796, 1.6768775087719294], [-5.350389302018689, -0.5566830043803485, 1.7422829333333323], [-4.1843643546672675, -0.6629845868254337, 1.7802260877192975], [-2.636821113232064, -0.8040212514452872, 1.8051646035087712], [-1.1075108270151939, -0.9441595289913224, 1.7996509999999997], [0.09689369974035862, -1.0600917564932248, 1.7701613228070174], [1.4917090644393414, -1.202767180204984, 1.6984578807017552], [2.5760385611825303, -1.3205119402071581, 1.605668673684211], [3.557581850630719, -1.4336058928221527, 1.4831271052631583], [4.282849431405132, -1.5190554204178421, 1.367774929824562], [5.107017136830614, -1.6161571563220347, 1.2136629122807037], [5.815801363496529, -1.6996646491996403, 1.0615314771929854], [6.508102236053935, -1.781230107359162, 0.8954449824561446], [7.18391975450283, -1.8608535308006, 0.7166382280701807], [7.942154043494274, -1.9501871278324572, 0.4964159719298306], [8.601488207834628, -2.0278685165558143, 0.28806235789474316], [9.376170088706635, -2.1191212924293525, 0.023389572543037935], [10.169468863583372, -2.2047021894469347, 0.17637912850963944], 
[10.828635548873617, -2.274339807435977, 0.3671952908753961], [11.516461655263438, -2.347005147946282, 0.5441990081266206], [12.161298630003895, -2.415128904674693, 0.6896334930496439], [12.763146473094988, -2.47871107762121, 0.8074677456444661], [13.393653737285657, -2.5453209730889896, 0.9123715531247563], [13.92385302762781, -2.6013338397323498, 0.9859008185059097], [14.525700870718904, -2.6649160126788667, 1.0531082711007325], [15.098889292710421, -2.725470463104121, 1.1010433688100876], [15.672077714701938, -2.786024913529375, 1.1332984665194428]]



ax.plot_surface(X1, Y1, np.ones(X1.shape) * -0.01,rstride=8, cstride=8, facecolors=img, zorder = 20)



#draw_point_3D(real_ball_trajectory_list_1, estimation_ball_trajectory_list_1)

#draw_point_3D(real_ball_trajectory_list_2, estimation_ball_trajectory_list_2)

#draw_point_3D(real_ball_trajectory_list_3, estimation_ball_trajectory_list_3)

#draw_point_3D(real_ball_trajectory_list_4, estimation_ball_trajectory_list_4)

#draw_point_3D(real_ball_trajectory_list_5, estimation_ball_trajectory_list_5,True)

draw_point_3D(real_ball_trajectory, estimation_ball_trajectory, True)



#낙하지점
"""draw_point_3D(real_ball_trajectory_list, estimation_ball_trajectory_list)

p = Ellipse((landing_point[0], landing_point[1]),  height = circle_radius_y,  width= circle_radius_x, angle = 0, color = "blue", zorder = 21 )
ax.add_patch(p)
art3d.pathpatch_2d_to_3d(p, z=0.01, zdir="z")"""






ax.view_init(30, 45)

ax.legend()

plt.show()